/* Generated by re2c 0.14.3.dev on Wed May 20 12:51:33 2015 */
/* $Id$ */
#include <stdlib.h>
#include <string.h>
#include <iostream>
#include <sstream>
#include "scanner.h"
#include "parser.h"
#include "y.tab.h"
#include "globals.h"
#include "dfa.h"
#include "print.h"

extern YYSTYPE yylval;

#ifndef MAX
#define MAX(a,b) (((a)>(b))?(a):(b))
#endif

#define	YYCTYPE		unsigned char
#define	YYCURSOR	cursor
#define	YYLIMIT		lim
#define	YYMARKER	ptr
#define	YYCTXMARKER ctx
#define	YYFILL(n)	{cursor = fill(cursor, n);}

#define	RETURN(i)	{cur = cursor; return i;}

namespace re2c
{



Scanner::ParseMode Scanner::echo()
{
	char *cursor = cur;
	bool ignore_eoc = false;
	int  ignore_cnt = 0;

	if (eof && cursor == eof) // Catch EOF
	{
		return Stop;
	}

	tok = cursor;
echo:

{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};

	if ((YYLIMIT - YYCURSOR) < 16) YYFILL(16);
	yych = *YYCURSOR;
	if (yych <= '%') {
		if (yych <= '\t') {
			if (yych >= 0x01) goto yy4;
		} else {
			if (yych <= '\n') goto yy6;
			if (yych <= '$') goto yy4;
			goto yy8;
		}
	} else {
		if (yych <= '*') {
			if (yych <= ')') goto yy4;
			goto yy9;
		} else {
			if (yych == '/') goto yy10;
			goto yy4;
		}
	}
	++YYCURSOR;
	{
					if (!ignore_eoc && !DFlag)
					{
						out.write(tok, cursor - tok - 1);
						// -1 so we don't write out the \0
					}
					if(cursor == eof)
					{
						RETURN(Stop);
					}
				}
yy4:
	++YYCURSOR;
yy5:
	{
					goto echo;
				}
yy6:
	yyaccept = 0;
	yych = *(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy89;
	}
	if (yych == '#') goto yy91;
yy7:
	{
					if (ignore_eoc)
					{
						ignore_cnt++;
					}
					else if (!DFlag)
					{
						out.write(tok, cursor - tok);
					}
					tok = pos = cursor;
					cline++;
					goto echo;
				}
yy8:
	yych = *++YYCURSOR;
	if (yych == '{') goto yy32;
	goto yy5;
yy9:
	yych = *++YYCURSOR;
	if (yych == '/') goto yy84;
	goto yy5;
yy10:
	yyaccept = 1;
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych != '*') goto yy5;
	yych = *++YYCURSOR;
	if (yych == '!') goto yy13;
yy12:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy7;
		} else {
			goto yy5;
		}
	} else {
		goto yy85;
	}
yy13:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'g':	goto yy16;
	case 'i':	goto yy15;
	case 'm':	goto yy17;
	case 'r':	goto yy19;
	case 't':	goto yy14;
	case 'u':	goto yy18;
	default:	goto yy12;
	}
yy14:
	yych = *++YYCURSOR;
	if (yych == 'y') goto yy74;
	goto yy12;
yy15:
	yych = *++YYCURSOR;
	if (yych == 'g') goto yy63;
	goto yy12;
yy16:
	yych = *++YYCURSOR;
	if (yych == 'e') goto yy50;
	goto yy12;
yy17:
	yych = *++YYCURSOR;
	if (yych == 'a') goto yy42;
	goto yy12;
yy18:
	yych = *++YYCURSOR;
	if (yych == 's') goto yy34;
	goto yy12;
yy19:
	yych = *++YYCURSOR;
	if (yych == 'e') goto yy20;
	if (yych == 'u') goto yy21;
	goto yy12;
yy20:
	yych = *++YYCURSOR;
	if (yych == '2') goto yy31;
	goto yy12;
yy21:
	yych = *++YYCURSOR;
	if (yych != 'l') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 's') goto yy12;
	yych = *++YYCURSOR;
	if (yych != ':') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'r') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = *++YYCURSOR;
	if (yych != '2') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'c') goto yy12;
	++YYCURSOR;
	{
					if (rFlag)
					{
						mapCodeName.clear();
					}
					else
					{
						fatal("found 'rules:re2c' block without -r flag");
					}
					if (bUsedYYMaxFill && bSinglePass)
					{
						fatal("found scanner block after YYMAXFILL declaration");
					}
					tok = cursor;
					RETURN(Rules);
				}
yy31:
	yych = *++YYCURSOR;
	if (yych != 'c') goto yy12;
yy32:
	++YYCURSOR;
	{
					if (rFlag)
					{
						fatal("found standard 're2c' block while using -r flag");
					}
					if (bUsedYYMaxFill && bSinglePass)
					{
						fatal("found scanner block after YYMAXFILL declaration");
					}
					if (!DFlag)
					{
						const size_t lexeme_len = cursor[-1] == '{'
							? sizeof ("%{") - 1
							: sizeof ("/*!re2c") - 1;
						out.write(tok, cursor - tok - lexeme_len);
					}
					tok = cursor;
					RETURN(Parse);
				}
yy34:
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = *++YYCURSOR;
	if (yych != ':') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'r') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = *++YYCURSOR;
	if (yych != '2') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'c') goto yy12;
	++YYCURSOR;
	{
					if (!rFlag)
					{
						fatal("found 'use:re2c' block without -r flag");
					}
					reuse();
					if (bUsedYYMaxFill && bSinglePass)
					{
						fatal("found scanner block after YYMAXFILL declaration");
					}
					if (!DFlag)
					{
						const size_t lexeme_len = sizeof ("/*!use:re2c") - 1;
						out.write(tok, cursor - tok - lexeme_len);
					}
					tok = cursor;
					RETURN(Reuse);
				}
yy42:
	yych = *++YYCURSOR;
	if (yych != 'x') goto yy12;
	yych = *++YYCURSOR;
	if (yych != ':') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'r') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = *++YYCURSOR;
	if (yych != '2') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'c') goto yy12;
	++YYCURSOR;
	{
					if (bUsedYYMaxFill)
					{
						fatal("cannot generate YYMAXFILL twice");
					}
					if (!DFlag)
					{
						out << "#define YYMAXFILL " << maxFill << std::endl;
					}
					tok = pos = cursor;
					ignore_eoc = true;
					bUsedYYMaxFill = true;
					goto echo;
				}
yy50:
	yych = *++YYCURSOR;
	if (yych != 't') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 's') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 't') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'a') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 't') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = *++YYCURSOR;
	if (yych != ':') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'r') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = *++YYCURSOR;
	if (yych != '2') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'c') goto yy12;
	++YYCURSOR;
	{
					tok = pos = cursor;
					genGetStateGoto(out, topIndent, 0);
					ignore_eoc = true;
					goto echo;
				}
yy63:
	yych = *++YYCURSOR;
	if (yych != 'n') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'o') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'r') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = *++YYCURSOR;
	if (yych != ':') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'r') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = *++YYCURSOR;
	if (yych != '2') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'c') goto yy12;
	++YYCURSOR;
	{
					tok = pos = cursor;
					ignore_eoc = true;
					goto echo;
				}
yy74:
	yych = *++YYCURSOR;
	if (yych != 'p') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 's') goto yy12;
	yych = *++YYCURSOR;
	if (yych != ':') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'r') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = *++YYCURSOR;
	if (yych != '2') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'c') goto yy12;
	++YYCURSOR;
	{
					if (bSinglePass)
					{
						fatal("cannot generate types inline in single pass mode");
					}
					tok = pos = cursor;
					ignore_eoc = true;
					if (bLastPass && !DFlag)
					{
						out << outputFileInfo;
						out << "\n";
						out << typesInline;
						out << "\n";
						out << sourceFileInfo;
					}
					goto echo;
				}
yy84:
	yyaccept = 2;
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy87;
	if (yych == '\r') goto yy86;
yy85:
	{
					if (ignore_eoc)
					{
						if (ignore_cnt)
						{
							out << "\n" << sourceFileInfo;
						}
						ignore_eoc = false;
						ignore_cnt = 0;
					}
					else if (!DFlag)
					{
						out.write(tok, cursor - tok);
					}
					tok = pos = cursor;
					goto echo;
				}
yy86:
	yych = *++YYCURSOR;
	if (yych != '\n') goto yy12;
yy87:
	++YYCURSOR;
	{
					cline++;
					if (ignore_eoc)
					{
						if (ignore_cnt)
						{
							out << sourceFileInfo;
						}
						ignore_eoc = false;
						ignore_cnt = 0;
					}
					else if (!DFlag)
					{
						out.write(tok, cursor - tok);
					}
					tok = pos = cursor;
					goto echo;
				}
yy89:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy89;
	}
	if (yych != '#') goto yy12;
yy91:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = *YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy91;
		goto yy12;
	} else {
		if (yych <= ' ') goto yy91;
		if (yych != 'l') goto yy12;
	}
	yych = *++YYCURSOR;
	if (yych != 'i') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'n') goto yy12;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy12;
	yych = *++YYCURSOR;
	if (yych <= '0') goto yy98;
	if (yych <= '9') goto yy12;
	goto yy98;
yy97:
	YYCTXMARKER = YYCURSOR + 1;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy98:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy97;
		goto yy12;
	} else {
		if (yych <= ' ') goto yy97;
		if (yych <= '0') goto yy12;
		if (yych >= ':') goto yy12;
	}
yy99:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy99;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy12;
		if (yych <= '\t') goto yy101;
		if (yych <= '\n') goto yy103;
		goto yy12;
	} else {
		if (yych <= '\r') goto yy105;
		if (yych != ' ') goto yy12;
	}
yy101:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy101;
		goto yy12;
	} else {
		if (yych <= ' ') goto yy101;
		if (yych == '"') goto yy106;
		goto yy12;
	}
yy103:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
	{
					set_sourceline(cursor);
					goto echo;
				}
yy105:
	yych = *++YYCURSOR;
	if (yych == '\n') goto yy103;
	goto yy12;
yy106:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = *YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy106;
	}
	if (yych <= '\n') goto yy12;
	if (yych <= '"') goto yy109;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych == '\n') goto yy12;
	goto yy106;
yy109:
	++YYCURSOR;
	if ((yych = *YYCURSOR) == '\n') goto yy103;
	if (yych == '\r') goto yy105;
	goto yy12;
}

}

int Scanner::scan()
{
	char *cursor = cur;
	uint depth;

scan:
	tchar = cursor - pos;
	tline = cline;
	tok = cursor;
	if (iscfg == 1)
	{
		goto config;
	}
	else if (iscfg == 2)
	{
		goto value;
	}

{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 240,   0, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		240, 224,  96, 224, 224, 224, 224, 160, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		236, 236, 236, 236, 236, 236, 236, 236, 
		236, 236, 224, 224, 224, 224, 224, 224, 
		224, 232, 232, 232, 232, 232, 232, 232, 
		232, 232, 232, 232, 232, 232, 232, 232, 
		232, 232, 232, 232, 232, 232, 232, 232, 
		232, 232, 232, 224,   0, 192, 224, 232, 
		224, 232, 232, 232, 232, 232, 232, 232, 
		232, 232, 232, 232, 232, 232, 232, 232, 
		232, 232, 232, 232, 232, 232, 232, 232, 
		232, 232, 232, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
		224, 224, 224, 224, 224, 224, 224, 224, 
	};
	if ((YYLIMIT - YYCURSOR) < 6) YYFILL(6);
	yych = *YYCURSOR;
	if (yych <= '.') {
		if (yych <= '"') {
			if (yych <= '\f') {
				if (yych <= 0x08) goto yy112;
				if (yych <= '\t') goto yy114;
				if (yych <= '\n') goto yy116;
			} else {
				if (yych <= 0x1F) {
					if (yych <= '\r') goto yy118;
				} else {
					if (yych <= ' ') goto yy114;
					if (yych >= '"') goto yy119;
				}
			}
		} else {
			if (yych <= ')') {
				if (yych <= '%') {
					if (yych >= '%') goto yy121;
				} else {
					if (yych <= '&') goto yy112;
					if (yych <= '\'') goto yy122;
					goto yy124;
				}
			} else {
				if (yych <= '+') {
					if (yych <= '*') goto yy126;
					goto yy128;
				} else {
					if (yych <= ',') goto yy124;
					if (yych >= '.') goto yy130;
				}
			}
		}
	} else {
		if (yych <= '[') {
			if (yych <= '<') {
				if (yych <= '9') {
					if (yych <= '/') goto yy132;
					goto yy133;
				} else {
					if (yych <= ':') goto yy134;
					if (yych <= ';') goto yy124;
					goto yy135;
				}
			} else {
				if (yych <= '?') {
					if (yych <= '>') goto yy124;
					goto yy128;
				} else {
					if (yych <= '@') goto yy112;
					if (yych <= 'Z') goto yy133;
					goto yy136;
				}
			}
		} else {
			if (yych <= 'q') {
				if (yych <= '^') {
					if (yych <= '\\') goto yy124;
				} else {
					if (yych != '`') goto yy133;
				}
			} else {
				if (yych <= 'z') {
					if (yych <= 'r') goto yy138;
					goto yy133;
				} else {
					if (yych <= '{') goto yy139;
					if (yych <= '|') goto yy124;
				}
			}
		}
	}
yy112:
	++YYCURSOR;
yy113:
	{
					std::ostringstream msg;
					msg << "unexpected character: ";
					prtChOrHex(msg, *tok);
					fatal(msg.str().c_str());
					goto scan;
				}
yy114:
	++YYCURSOR;
	yych = *YYCURSOR;
	goto yy248;
yy115:
	{
					goto scan;
				}
yy116:
	yyaccept = 0;
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy226;
	} else {
		if (yych <= ' ') goto yy226;
		if (yych == '#') goto yy228;
	}
yy117:
	{
					if (cursor == eof) RETURN(0);
					pos = cursor;
					cline++;
					goto scan;
				}
yy118:
	yych = *++YYCURSOR;
	if (yych == '\n') goto yy225;
	goto yy113;
yy119:
	yyaccept = 1;
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych != '\n') goto yy221;
yy120:
	{
					fatal("unterminated string constant (missing \")");
				}
yy121:
	yych = *++YYCURSOR;
	if (yych == '}') goto yy213;
	goto yy113;
yy122:
	yyaccept = 2;
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych != '\n') goto yy216;
yy123:
	{
					fatal("unterminated string constant (missing ')");
				}
yy124:
	++YYCURSOR;
yy125:
	{
					RETURN(*tok);
				}
yy126:
	++YYCURSOR;
	if ((yych = *YYCURSOR) == '/') goto yy213;
	{
					yylval.op = *tok;
					RETURN(STAR);
				}
yy128:
	++YYCURSOR;
	{
					yylval.op = *tok;
					RETURN(CLOSE);
				}
yy130:
	++YYCURSOR;
	{
					cur = cursor;
					yylval.regexp = mkDot();
					return RANGE;
				}
yy132:
	yych = *++YYCURSOR;
	if (yych == '*') goto yy209;
	if (yych == '/') goto yy211;
	goto yy125;
yy133:
	YYCTXMARKER = YYCURSOR + 1;
	yych = *++YYCURSOR;
	goto yy169;
yy134:
	YYCTXMARKER = YYCURSOR + 1;
	yych = *++YYCURSOR;
	if (yych == '=') goto yy205;
	goto yy113;
yy135:
	yyaccept = 3;
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych == '!') goto yy196;
	if (yych == '>') goto yy198;
	goto yy125;
yy136:
	yyaccept = 4;
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy137;
	if (yych == '^') goto yy188;
	goto yy187;
yy137:
	{
					fatal("unterminated range (missing ])");
				}
yy138:
	YYCTXMARKER = YYCURSOR + 1;
	yych = *++YYCURSOR;
	if (yych == 'e') goto yy170;
	goto yy169;
yy139:
	yyaccept = 5;
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych <= '@') {
		if (yych <= '/') {
			if (yych == ',') goto yy147;
		} else {
			if (yych <= '0') goto yy141;
			if (yych <= '9') goto yy143;
		}
	} else {
		if (yych <= '_') {
			if (yych <= 'Z') goto yy145;
			if (yych >= '_') goto yy145;
		} else {
			if (yych <= '`') goto yy140;
			if (yych <= 'z') goto yy145;
		}
	}
yy140:
	{
					depth = 1;
					goto code;
				}
yy141:
	yych = *++YYCURSOR;
	if (yych == ',') goto yy160;
	goto yy144;
yy142:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 3) {
		if (yyaccept <= 1) {
			if (yyaccept == 0) {
				goto yy117;
			} else {
				goto yy120;
			}
		} else {
			if (yyaccept == 2) {
				goto yy123;
			} else {
				goto yy125;
			}
		}
	} else {
		if (yyaccept <= 5) {
			if (yyaccept == 4) {
				goto yy137;
			} else {
				goto yy140;
			}
		} else {
			if (yyaccept == 6) {
				goto yy148;
			} else {
				goto yy176;
			}
		}
	}
yy143:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
yy144:
	if (yybm[0+yych] & 4) {
		goto yy143;
	}
	if (yych <= '^') {
		if (yych <= ',') {
			if (yych <= '+') goto yy142;
			goto yy153;
		} else {
			if (yych <= '@') goto yy142;
			if (yych >= '[') goto yy142;
		}
	} else {
		if (yych <= 'z') {
			if (yych == '`') goto yy142;
		} else {
			if (yych == '}') goto yy151;
			goto yy142;
		}
	}
yy145:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yybm[0+yych] & 8) {
		goto yy145;
	}
	if (yych == '}') goto yy149;
	goto yy142;
yy147:
	++YYCURSOR;
yy148:
	{
					fatal("illegal closure form, use '{n}', '{n,}', '{n,m}' where n and m are numbers");
				}
yy149:
	++YYCURSOR;
	{
					if (!FFlag) {
						fatal("curly braces for names only allowed with -F switch");
					}
					cur = cursor;
					yylval.symbol = Symbol::find(token(1, cur - tok - 2));
					return ID;
				}
yy151:
	++YYCURSOR;
	{
					yylval.extop.minsize = atoi((char *)tok+1);
					yylval.extop.maxsize = atoi((char *)tok+1);
					RETURN(CLOSESIZE);
				}
yy153:
	yyaccept = 6;
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy148;
	if (yych <= '9') goto yy156;
	if (yych != '}') goto yy148;
	++YYCURSOR;
	{
					yylval.extop.minsize = atoi((char *)tok+1);
					yylval.extop.maxsize = -1;
					RETURN(CLOSESIZE);
				}
yy156:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych <= '/') goto yy142;
	if (yych <= '9') goto yy156;
	if (yych != '}') goto yy142;
	++YYCURSOR;
	{
					yylval.extop.minsize = atoi((char *)tok+1);
					yylval.extop.maxsize = MAX(yylval.extop.minsize,atoi(strchr((char *)tok, ',')+1));
					RETURN(CLOSESIZE);
				}
yy160:
	yyaccept = 6;
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych <= '/') goto yy148;
	if (yych <= '9') goto yy156;
	if (yych != '}') goto yy148;
	++YYCURSOR;
	{
					yylval.op = '*';
					RETURN(CLOSE);
				}
yy163:
	++YYCURSOR;
yy164:
	YYCURSOR = YYCTXMARKER;
	{
					if (!FFlag) {
						cur = cursor;
						yylval.symbol = Symbol::find(token());
						return ID;
					} else {
						/* Add one char in front and one behind instead of 's or "s */
						cur = cursor;
						if (bCaseInsensitive || bCaseInverted)
						{
							yylval.regexp = strToCaseInsensitiveRE(raw_token("\""));
						}
						else
						{
							yylval.regexp = strToRE(raw_token("\""));
						}
						return STRING;
					}
				}
yy165:
	yych = *++YYCURSOR;
	goto yy184;
yy166:
	++YYCURSOR;
yy167:
	YYCURSOR = YYCTXMARKER;
	{
					cur = ptr > tok ? ptr - 1 : cursor;
					yylval.symbol = Symbol::find(token());
					return ID;
				}
yy168:
	YYCTXMARKER = YYCURSOR + 1;
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
yy169:
	if (yych <= '9') {
		if (yych <= ' ') {
			if (yych == '\t') goto yy165;
			if (yych <= 0x1F) goto yy163;
			goto yy165;
		} else {
			if (yych == ',') goto yy166;
			if (yych <= '/') goto yy163;
			goto yy168;
		}
	} else {
		if (yych <= 'Z') {
			if (yych <= '<') goto yy163;
			if (yych <= '>') goto yy166;
			if (yych <= '@') goto yy163;
			goto yy168;
		} else {
			if (yych <= '_') {
				if (yych <= '^') goto yy163;
				goto yy168;
			} else {
				if (yych <= '`') goto yy163;
				if (yych <= 'z') goto yy168;
				goto yy163;
			}
		}
	}
yy170:
	YYCTXMARKER = YYCURSOR + 1;
	yych = *++YYCURSOR;
	if (yych != '2') goto yy169;
	YYCTXMARKER = YYCURSOR + 1;
	yych = *++YYCURSOR;
	if (yych != 'c') goto yy169;
	YYCTXMARKER = YYCURSOR + 1;
	yych = *++YYCURSOR;
	if (yych != ':') goto yy169;
	yych = *++YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy164;
		if (yych <= '9') goto yy174;
		if (yych <= '@') goto yy164;
	} else {
		if (yych <= '_') {
			if (yych <= '^') goto yy164;
		} else {
			if (yych <= '`') goto yy164;
			if (yych >= '{') goto yy164;
		}
	}
yy174:
	yyaccept = 7;
	YYMARKER = ++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
	if (yych <= '@') {
		if (yych <= '9') {
			if (yych >= '0') goto yy174;
		} else {
			if (yych <= ':') goto yy178;
			if (yych >= '@') goto yy177;
		}
	} else {
		if (yych <= '_') {
			if (yych <= 'Z') goto yy174;
			if (yych >= '_') goto yy174;
		} else {
			if (yych <= '`') goto yy176;
			if (yych <= 'z') goto yy174;
		}
	}
yy176:
	{
					cur = cursor;
					tok += 5; /* skip "re2c:" */
					iscfg = 1;
					yylval.str = new Str(token());
					return CONFIG;
				}
yy177:
	yych = *++YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy142;
		if (yych <= '9') goto yy179;
		if (yych <= '@') goto yy142;
		goto yy179;
	} else {
		if (yych <= '_') {
			if (yych <= '^') goto yy142;
			goto yy179;
		} else {
			if (yych <= '`') goto yy142;
			if (yych <= 'z') goto yy179;
			goto yy142;
		}
	}
yy178:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy142;
		if (yych <= '9') goto yy174;
		if (yych <= '@') goto yy142;
		goto yy174;
	} else {
		if (yych <= '_') {
			if (yych <= '^') goto yy142;
			goto yy174;
		} else {
			if (yych <= '`') goto yy142;
			if (yych <= 'z') goto yy174;
			goto yy142;
		}
	}
yy179:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych <= 'Z') {
		if (yych <= '/') goto yy176;
		if (yych <= '9') goto yy179;
		if (yych <= '@') goto yy176;
		goto yy179;
	} else {
		if (yych <= '_') {
			if (yych <= '^') goto yy176;
			goto yy179;
		} else {
			if (yych <= '`') goto yy176;
			if (yych <= 'z') goto yy179;
			goto yy176;
		}
	}
yy181:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
	{
					cur = ptr > tok ? ptr - 1 : cursor;
					yylval.symbol = Symbol::find(token());
					return FFlag ? FID : ID;
				}
yy183:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy184:
	if (yybm[0+yych] & 16) {
		goto yy183;
	}
	if (yych == ',') goto yy185;
	if (yych <= '<') goto yy181;
	if (yych >= '?') goto yy181;
yy185:
	yych = *++YYCURSOR;
	goto yy167;
yy186:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy187:
	if (yybm[0+yych] & 32) {
		goto yy186;
	}
	if (yych <= '\n') goto yy142;
	if (yych <= '\\') goto yy190;
	goto yy191;
yy188:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych <= '[') {
		if (yych == '\n') goto yy142;
		goto yy188;
	} else {
		if (yych <= '\\') goto yy193;
		if (yych <= ']') goto yy194;
		goto yy188;
	}
yy190:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych == '\n') goto yy142;
	goto yy186;
yy191:
	++YYCURSOR;
	{
					cur = cursor;
					yylval.regexp = ranToRE(token());
					return RANGE;
				}
yy193:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych == '\n') goto yy142;
	goto yy188;
yy194:
	++YYCURSOR;
	{
					cur = cursor;
					yylval.regexp = invToRE(token());
					return RANGE;
				}
yy196:
	++YYCURSOR;
	{
					RETURN(SETUP);
				}
yy198:
	YYCTXMARKER = YYCURSOR + 1;
	yych = *++YYCURSOR;
	goto yy200;
yy199:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
yy200:
	if (yych <= '9') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy142;
			goto yy199;
		} else {
			if (yych == ' ') goto yy199;
			goto yy142;
		}
	} else {
		if (yych <= '=') {
			if (yych <= ':') goto yy204;
			if (yych <= '<') goto yy142;
			goto yy203;
		} else {
			if (yych != '{') goto yy142;
		}
	}
yy201:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
	{
					RETURN(NOCOND);
				}
yy203:
	yych = *++YYCURSOR;
	if (yych == '>') goto yy201;
	goto yy142;
yy204:
	yych = *++YYCURSOR;
	if (yych == '=') goto yy201;
	goto yy142;
yy205:
	++YYCURSOR;
	if ((yych = *YYCURSOR) == '>') goto yy207;
	{
					cur = cursor;
					tok += 2; /* skip ":=" */
					depth = 0;
					goto code;
				}
yy207:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
	{
					RETURN(*tok);
				}
yy209:
	++YYCURSOR;
	{
					depth = 1;
					goto comment;
				}
yy211:
	++YYCURSOR;
	{
				goto nextLine;
			}
yy213:
	++YYCURSOR;
	{
					tok = cursor;
					RETURN(0);
				}
yy215:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy216:
	if (yybm[0+yych] & 64) {
		goto yy215;
	}
	if (yych <= '\n') goto yy142;
	if (yych <= '\'') goto yy218;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych == '\n') goto yy142;
	goto yy215;
yy218:
	++YYCURSOR;
	{
					cur = cursor;
					if (bCaseInverted)
					{
						yylval.regexp = strToRE(token());
					}
					else
					{
						yylval.regexp = strToCaseInsensitiveRE(token());
					}
					return STRING;
				}
yy220:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy221:
	if (yybm[0+yych] & 128) {
		goto yy220;
	}
	if (yych <= '\n') goto yy142;
	if (yych <= '"') goto yy223;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych == '\n') goto yy142;
	goto yy220;
yy223:
	++YYCURSOR;
	{
					cur = cursor;
					if (bCaseInsensitive || bCaseInverted)
					{
						yylval.regexp = strToCaseInsensitiveRE(token());
					}
					else
					{
						yylval.regexp = strToRE(token());
					}
					return STRING;
				}
yy225:
	yyaccept = 0;
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych != '\t') goto yy117;
	} else {
		if (yych <= ' ') goto yy226;
		if (yych == '#') goto yy228;
		goto yy117;
	}
yy226:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy226;
		goto yy142;
	} else {
		if (yych <= ' ') goto yy226;
		if (yych != '#') goto yy142;
	}
yy228:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = *YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy228;
		goto yy142;
	} else {
		if (yych <= ' ') goto yy228;
		if (yych != 'l') goto yy142;
	}
	yych = *++YYCURSOR;
	if (yych != 'i') goto yy142;
	yych = *++YYCURSOR;
	if (yych != 'n') goto yy142;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy142;
	yych = *++YYCURSOR;
	if (yych <= '0') goto yy235;
	if (yych <= '9') goto yy142;
	goto yy235;
yy234:
	YYCTXMARKER = YYCURSOR + 1;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy235:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy234;
		goto yy142;
	} else {
		if (yych <= ' ') goto yy234;
		if (yych <= '0') goto yy142;
		if (yych >= ':') goto yy142;
	}
yy236:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy142;
		} else {
			if (yych <= '\n') goto yy240;
			if (yych <= '\f') goto yy142;
			goto yy242;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy142;
		} else {
			if (yych <= '/') goto yy142;
			if (yych <= '9') goto yy236;
			goto yy142;
		}
	}
yy238:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy238;
		goto yy142;
	} else {
		if (yych <= ' ') goto yy238;
		if (yych == '"') goto yy243;
		goto yy142;
	}
yy240:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
	{
					set_sourceline(cursor);
					goto scan;
				}
yy242:
	yych = *++YYCURSOR;
	if (yych == '\n') goto yy240;
	goto yy142;
yy243:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = *YYCURSOR;
	if (yych <= '!') {
		if (yych == '\n') goto yy142;
		goto yy243;
	} else {
		if (yych <= '"') goto yy246;
		if (yych != '\\') goto yy243;
	}
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych == '\n') goto yy142;
	goto yy243;
yy246:
	yych = *++YYCURSOR;
	if (yych == '\n') goto yy240;
	if (yych == '\r') goto yy242;
	goto yy142;
yy247:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy248:
	if (yych == '\t') goto yy247;
	if (yych == ' ') goto yy247;
	goto yy115;
}


code:

{
	YYCTYPE yych;
	unsigned int yyaccept = 0;
	static const unsigned char yybm[] = {
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48, 112,   0,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		112,  48,  16,  48,  48,  48,  48,  32, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		176, 176, 176, 176, 176, 176, 176, 176, 
		176, 176,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,   0,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
		 48,  48,  48,  48,  48,  48,  48,  48, 
	};
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = *YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\n') {
			if (yych <= 0x00) goto yy251;
			if (yych <= '\t') goto yy253;
			goto yy255;
		} else {
			if (yych == '"') goto yy257;
			goto yy253;
		}
	} else {
		if (yych <= '{') {
			if (yych <= '\'') goto yy258;
			if (yych <= 'z') goto yy253;
			goto yy259;
		} else {
			if (yych == '}') goto yy261;
			goto yy253;
		}
	}
yy251:
	++YYCURSOR;
	{
					if (cursor == eof)
					{
						if (depth)
						{
							fatal("missing '}'");
						}
						RETURN(0);
					}
					goto code;
				}
yy253:
	++YYCURSOR;
yy254:
	{
					goto code;
				}
yy255:
	YYCTXMARKER = YYCURSOR + 1;
	yyaccept = 0;
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych >= '\t') goto yy272;
		} else {
			if (yych <= '\n') goto yy274;
			if (yych >= '\r') goto yy274;
		}
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') goto yy272;
		} else {
			if (yych == '#') goto yy275;
		}
	}
yy256:
	{
					if (depth == 0)
					{
						cur = cursor;
						tok += strspn(tok, " \t\r\n");
						while (cur > tok && strchr(" \t\r\n", cur[-1]))
						{
							--cur;
						}
						yylval.token = new Token(token(), sourceFileInfo.fname, tline);
						return CODE;
					}
					else if (cursor == eof)
					{
						fatal("missing '}'");
					}
					pos = cursor;
					cline++;
					goto code;
				}
yy257:
	yyaccept = 1;
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy254;
	goto yy270;
yy258:
	yyaccept = 1;
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy254;
	goto yy264;
yy259:
	++YYCURSOR;
	{
					if (depth == 0)
					{
						fatal("Curly braces are not allowed after ':='");
					}
					else
					{
						++depth;
					}
					goto code;
				}
yy261:
	++YYCURSOR;
	{
					if (depth == 0)
					{
						fatal("Curly braces are not allowed after ':='");
					}
					else if (--depth == 0)
					{
						cur = cursor;
						yylval.token = new Token(token(), sourceFileInfo.fname, tline);
						return CODE;
					}
					goto code;
				}
yy263:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy264:
	if (yybm[0+yych] & 16) {
		goto yy263;
	}
	if (yych <= '\n') goto yy265;
	if (yych <= '\'') goto yy267;
	goto yy266;
yy265:
	YYCURSOR = YYMARKER;
	if (yyaccept <= 1) {
		if (yyaccept == 0) {
			goto yy256;
		} else {
			goto yy254;
		}
	} else {
		goto yy273;
	}
yy266:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych == '\n') goto yy265;
	goto yy263;
yy267:
	++YYCURSOR;
	{
					goto code;
				}
yy269:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy270:
	if (yybm[0+yych] & 32) {
		goto yy269;
	}
	if (yych <= '\n') goto yy265;
	if (yych <= '"') goto yy267;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych == '\n') goto yy265;
	goto yy269;
yy272:
	yyaccept = 2;
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy294;
	} else {
		if (yych <= ' ') goto yy294;
		if (yych == '#') goto yy275;
	}
yy273:
	YYCURSOR = YYCTXMARKER;
	{
					if (depth == 0)
					{
						goto code;
					}
					else if (cursor == eof)
					{
						fatal("missing '}'");
					}
					pos = cursor;
					cline++;
					goto code;
				}
yy274:
	yych = *++YYCURSOR;
	goto yy273;
yy275:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = *YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy275;
	}
	if (yych != 'l') goto yy265;
	yych = *++YYCURSOR;
	if (yych != 'i') goto yy265;
	yych = *++YYCURSOR;
	if (yych != 'n') goto yy265;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy265;
	yych = *++YYCURSOR;
	if (yych <= '0') goto yy282;
	if (yych <= '9') goto yy265;
	goto yy282;
yy281:
	YYCTXMARKER = YYCURSOR + 1;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy282:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy281;
		goto yy265;
	} else {
		if (yych <= ' ') goto yy281;
		if (yych <= '0') goto yy265;
		if (yych >= ':') goto yy265;
	}
yy283:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy283;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy265;
		if (yych <= '\t') goto yy285;
		if (yych <= '\n') goto yy287;
		goto yy265;
	} else {
		if (yych <= '\r') goto yy289;
		if (yych != ' ') goto yy265;
	}
yy285:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy285;
		goto yy265;
	} else {
		if (yych <= ' ') goto yy285;
		if (yych == '"') goto yy290;
		goto yy265;
	}
yy287:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
	{
					set_sourceline(cursor);
					goto code;
				}
yy289:
	yych = *++YYCURSOR;
	if (yych == '\n') goto yy287;
	goto yy265;
yy290:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = *YYCURSOR;
	if (yych <= '!') {
		if (yych == '\n') goto yy265;
		goto yy290;
	} else {
		if (yych <= '"') goto yy293;
		if (yych != '\\') goto yy290;
	}
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych == '\n') goto yy265;
	goto yy290;
yy293:
	yych = *++YYCURSOR;
	if (yych == '\n') goto yy287;
	if (yych == '\r') goto yy289;
	goto yy265;
yy294:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy294;
		goto yy265;
	} else {
		if (yych <= ' ') goto yy294;
		if (yych == '#') goto yy275;
		goto yy265;
	}
}


comment:

{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 160,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		160, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
	if (yych <= ')') {
		if (yych == '\n') goto yy300;
	} else {
		if (yych <= '*') goto yy302;
		if (yych == '/') goto yy303;
	}
	++YYCURSOR;
yy299:
	{
					if (cursor == eof)
					{
						RETURN(0);
					}
					goto comment;
				}
yy300:
	yych = *(YYMARKER = ++YYCURSOR);
	if (yybm[0+yych] & 32) {
		goto yy308;
	}
	if (yych == '#') goto yy311;
yy301:
	{
					if (cursor == eof)
					{
						RETURN(0);
					}
					tok = pos = cursor;
					cline++;
					goto comment;
				}
yy302:
	yych = *++YYCURSOR;
	if (yych == '/') goto yy306;
	goto yy299;
yy303:
	yych = *++YYCURSOR;
	if (yych != '*') goto yy299;
	++YYCURSOR;
	{
					++depth;
					fatal("ambiguous /* found");
					goto comment;
				}
yy306:
	++YYCURSOR;
	{
					if (--depth == 0)
					{
						goto scan;
					}
					else
					{
						goto comment;
					}
				}
yy308:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy308;
	}
	if (yych == '#') goto yy311;
yy310:
	YYCURSOR = YYMARKER;
	goto yy301;
yy311:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 5) YYFILL(5);
	yych = *YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy311;
		goto yy310;
	} else {
		if (yych <= ' ') goto yy311;
		if (yych != 'l') goto yy310;
	}
	yych = *++YYCURSOR;
	if (yych != 'i') goto yy310;
	yych = *++YYCURSOR;
	if (yych != 'n') goto yy310;
	yych = *++YYCURSOR;
	if (yych != 'e') goto yy310;
	yych = *++YYCURSOR;
	if (yych <= '0') goto yy318;
	if (yych <= '9') goto yy310;
	goto yy318;
yy317:
	YYCTXMARKER = YYCURSOR + 1;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy318:
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy317;
		goto yy310;
	} else {
		if (yych <= ' ') goto yy317;
		if (yych <= '0') goto yy310;
		if (yych >= ':') goto yy310;
	}
yy319:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy319;
	}
	if (yych <= '\f') {
		if (yych <= 0x08) goto yy310;
		if (yych <= '\t') goto yy321;
		if (yych <= '\n') goto yy323;
		goto yy310;
	} else {
		if (yych <= '\r') goto yy325;
		if (yych != ' ') goto yy310;
	}
yy321:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy321;
		goto yy310;
	} else {
		if (yych <= ' ') goto yy321;
		if (yych == '"') goto yy326;
		goto yy310;
	}
yy323:
	++YYCURSOR;
	YYCURSOR = YYCTXMARKER;
	{
					set_sourceline(cursor);
					goto comment;
				}
yy325:
	yych = *++YYCURSOR;
	if (yych == '\n') goto yy323;
	goto yy310;
yy326:
	++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) YYFILL(3);
	yych = *YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy326;
	}
	if (yych <= '\n') goto yy310;
	if (yych <= '"') goto yy329;
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych == '\n') goto yy310;
	goto yy326;
yy329:
	++YYCURSOR;
	if ((yych = *YYCURSOR) == '\n') goto yy323;
	if (yych == '\r') goto yy325;
	goto yy310;
}


nextLine:

{
	YYCTYPE yych;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych == '\n') goto yy334;
	++YYCURSOR;
	{  if(cursor == eof) {
                  RETURN(0);
               }
               goto nextLine;
            }
yy334:
	++YYCURSOR;
	{ if(cursor == eof) {
                  RETURN(0);
               }
               tok = pos = cursor;
               cline++;
               goto scan;
            }
}


config:

{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0, 128,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		128,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
		  0,   0,   0,   0,   0,   0,   0,   0, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
	if (yych <= 0x1F) {
		if (yych == '\t') goto yy340;
	} else {
		if (yych <= ' ') goto yy340;
		if (yych == '=') goto yy342;
	}
	++YYCURSOR;
	{
					fatal("missing '='");
				}
yy340:
	++YYCURSOR;
	yych = *YYCURSOR;
	goto yy347;
yy341:
	{
					goto config;
				}
yy342:
	++YYCURSOR;
	yych = *YYCURSOR;
	goto yy345;
yy343:
	{
					iscfg = 2;
					cur = cursor;
					RETURN('=');
				}
yy344:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy345:
	if (yybm[0+yych] & 128) {
		goto yy344;
	}
	goto yy343;
yy346:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy347:
	if (yych == '\t') goto yy346;
	if (yych == ' ') goto yy346;
	goto yy341;
}


value:

{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 192,   0, 248, 248, 192, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		192, 248, 104, 248, 248, 248, 248, 152, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		252, 252, 252, 252, 252, 252, 252, 252, 
		252, 252, 248, 192, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248,   8, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
		248, 248, 248, 248, 248, 248, 248, 248, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
	if (yych <= '&') {
		if (yych <= '\r') {
			if (yych <= 0x08) goto yy356;
			if (yych <= '\n') goto yy350;
			if (yych <= '\f') goto yy356;
		} else {
			if (yych <= ' ') {
				if (yych <= 0x1F) goto yy356;
			} else {
				if (yych == '"') goto yy358;
				goto yy356;
			}
		}
	} else {
		if (yych <= '/') {
			if (yych <= '\'') goto yy360;
			if (yych == '-') goto yy353;
			goto yy356;
		} else {
			if (yych <= '9') {
				if (yych <= '0') goto yy351;
				goto yy354;
			} else {
				if (yych != ';') goto yy356;
			}
		}
	}
yy350:
	{
					cur = cursor;
					yylval.str = new Str(token());
					iscfg = 0;
					return VALUE;
				}
yy351:
	++YYCURSOR;
	if (yybm[0+(yych = *YYCURSOR)] & 8) {
		goto yy356;
	}
yy352:
	{
					cur = cursor;
					yylval.number = atoi(token().to_string().c_str());
					iscfg = 0;
					return NUMBER;
				}
yy353:
	yych = *++YYCURSOR;
	if (yych <= '0') goto yy357;
	if (yych >= ':') goto yy357;
yy354:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yybm[0+yych] & 4) {
		goto yy354;
	}
	if (yych <= '\r') {
		if (yych <= 0x08) goto yy356;
		if (yych <= '\n') goto yy352;
		if (yych >= '\r') goto yy352;
	} else {
		if (yych <= ' ') {
			if (yych >= ' ') goto yy352;
		} else {
			if (yych == ';') goto yy352;
		}
	}
yy356:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy357:
	if (yybm[0+yych] & 8) {
		goto yy356;
	}
	goto yy350;
yy358:
	YYMARKER = ++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yybm[0+yych] & 16) {
		goto yy358;
	}
	if (yych <= ' ') {
		if (yych == '\n') goto yy350;
		goto yy368;
	} else {
		if (yych <= '"') goto yy356;
		if (yych <= ';') goto yy368;
		goto yy370;
	}
yy360:
	YYMARKER = ++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yybm[0+yych] & 32) {
		goto yy360;
	}
	if (yych <= ' ') {
		if (yych == '\n') goto yy350;
	} else {
		if (yych <= '\'') goto yy356;
		if (yych >= '<') goto yy365;
	}
yy362:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yybm[0+yych] & 64) {
		goto yy362;
	}
	if (yych <= '\n') goto yy364;
	if (yych <= '\'') goto yy366;
	goto yy367;
yy364:
	YYCURSOR = YYMARKER;
	goto yy350;
yy365:
	YYMARKER = ++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy360;
			goto yy362;
		} else {
			if (yych <= '\n') goto yy350;
			if (yych <= '\f') goto yy360;
			goto yy362;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy360;
			goto yy362;
		} else {
			if (yych == ';') goto yy362;
			goto yy360;
		}
	}
yy366:
	yych = *++YYCURSOR;
	goto yy350;
yy367:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych == '\n') goto yy364;
	goto yy362;
yy368:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yybm[0+yych] & 128) {
		goto yy368;
	}
	if (yych <= '\n') goto yy364;
	if (yych <= '"') goto yy366;
	goto yy371;
yy370:
	YYMARKER = ++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych <= '\r') {
		if (yych <= '\t') {
			if (yych <= 0x08) goto yy358;
			goto yy368;
		} else {
			if (yych <= '\n') goto yy350;
			if (yych <= '\f') goto yy358;
			goto yy368;
		}
	} else {
		if (yych <= ' ') {
			if (yych <= 0x1F) goto yy358;
			goto yy368;
		} else {
			if (yych == ';') goto yy368;
			goto yy358;
		}
	}
yy371:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych == '\n') goto yy364;
	goto yy368;
}

}

void Scanner::set_sourceline(char *& cursor) 
{
sourceline:
	tok = cursor;

{
	YYCTYPE yych;
	static const unsigned char yybm[] = {
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128,   0, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		192, 192, 192, 192, 192, 192, 192, 192, 
		192, 192, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128,   0, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
		128, 128, 128, 128, 128, 128, 128, 128, 
	};
	if ((YYLIMIT - YYCURSOR) < 2) YYFILL(2);
	yych = *YYCURSOR;
	if (yych <= '!') {
		if (yych == '\n') goto yy376;
	} else {
		if (yych <= '"') goto yy378;
		if (yych <= '0') goto yy374;
		if (yych <= '9') goto yy379;
	}
yy374:
	++YYCURSOR;
yy375:
	{
  					goto sourceline;
  				}
yy376:
	++YYCURSOR;
	{
  					if (cursor == eof)
  					{
						--cursor; 
					}
			  		else
			  		{
			  			pos = cursor; 
			  		}
			  		tok = cursor;
			  		return; 
				}
yy378:
	yych = *(YYMARKER = ++YYCURSOR);
	if (yych == '\n') goto yy375;
	goto yy384;
yy379:
	++YYCURSOR;
	yych = *YYCURSOR;
	goto yy382;
yy380:
	{
					cur = cursor;
					cline = atoi(token().to_string().c_str());
					goto sourceline; 
				}
yy381:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy382:
	if (yybm[0+yych] & 64) {
		goto yy381;
	}
	goto yy380;
yy383:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
yy384:
	if (yybm[0+yych] & 128) {
		goto yy383;
	}
	if (yych <= '\n') goto yy385;
	if (yych <= '"') goto yy387;
	goto yy386;
yy385:
	YYCURSOR = YYMARKER;
	goto yy375;
yy386:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) YYFILL(1);
	yych = *YYCURSOR;
	if (yych == '\n') goto yy385;
	goto yy383;
yy387:
	++YYCURSOR;
	{
					cur = cursor;
					sourceFileInfo.set_fname(token(1, cur - tok - 2).to_string());
			  		goto sourceline; 
				}
}

}

} // end namespace re2c
